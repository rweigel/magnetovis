#!/usr/bin/env python
import os
import sys
import site
import shlex
import subprocess
import sysconfig

pvpython = False
pvbatch = False
if len(sys.argv) > 1:
    if sys.argv[1] == "pvpython":
        pvpython = True
        sys.argv[1] = ''

    if sys.argv[1] == "pvbatch":
        pvbatch = True
        sys.argv[1] = ''

# https://stackoverflow.com/a/8663557
# Temporarily modify path so that util functions can be used.
setup_path = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
sys.path.insert(0, os.path.join(setup_path, 'magnetovis'))
import util
del sys.path[0]

PARAVIEW, PVPYTHON, PVBATCH = util.compatability_check()

PYTHONPATH = ":".join(site.getsitepackages())
pvargs = " ".join(sys.argv[1:])

if pvpython:
    syscom = PVPYTHON + " " + pvargs
elif pvbatch:
    syscom = PVBATCH + " " + pvargs
else:
    syscom = PARAVIEW + " " + pvargs

my_env = os.environ.copy()
if "PYTHONPATH" in my_env:
	my_env["PYTHONPATH"] = PYTHONPATH + ":.:" + my_env["PYTHONPATH"]
else:
	my_env["PYTHONPATH"] = PYTHONPATH + ":."

# this is done to resolve import error on _sysconfig__darwin_darwin for macos 11.4
stdlib = sysconfig.get_path('stdlib')
if stdlib not in my_env["PYTHONPATH"].split(":"):
    my_env["PYTHONPATH"] = stdlib + ":" + my_env["PYTHONPATH"]

# this is done to resolve import error of _lzma for macos 11.4 (note: importing lzma works but inside of lzma.py there is a call to _lzma)
if sys.platform == 'darwin':
    lib_dynload = os.path.join(stdlib,'lib-dynload')
    if lib_dynload not in my_env["PYTHONPATH"]:
        my_env["PYTHONPATH"] = lib_dynload + ":" + my_env["PYTHONPATH"]


# TODO: Get base path
my_env["PV_MACRO_PATH"] = 'magnetovis/Macros'
my_env["PV_PLUGIN_PATH"] = 'magnetovis/Plugins'

# The following prints the equivalent of what is being executed.
print("Executing:\nPV_MACRO_PATH=" + my_env["PV_MACRO_PATH"] + " PV_PLUGIN_PATH=" + my_env["PV_PLUGIN_PATH"] + " PYTHONPATH=" + my_env["PYTHONPATH"] + " " + syscom)
try:
    args = shlex.split(syscom)
    process = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=my_env)
    for line in process.stdout:
        sys.stdout.write(line.decode('utf8'))
except OSError as e:
    msg = "Execution failed: " + cmd + "\n" + e[1]
    raise OSError(msg)
except (KeyboardInterrupt, SystemExit) as e:
	pass
except e:
	raise e
